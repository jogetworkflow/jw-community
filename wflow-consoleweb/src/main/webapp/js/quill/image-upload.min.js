(function() {
    var exports = {};
    "use strict";
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var _createClass = function() {
        function e(e, t) {
            for (var i = 0; i < t.length; i++) {
                var n = t[i];
                n.enumerable = n.enumerable || false;
                n.configurable = true;
                if ("value" in n) n.writable = true;
                Object.defineProperty(e, n.key, n)
            }
        }
        return function(t, i, n) {
            if (i) e(t.prototype, i);
            if (n) e(t, n);
            return t
        }
    }();

    function _classCallCheck(e, t) {
        if (!(e instanceof t)) {
            throw new TypeError("Cannot call a class as a function")
        }
    }
    var ImageUpload = exports.ImageUpload = function() {
        function e(t) {
            var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            _classCallCheck(this, e);
            this.quill = t;
            this.options = i;
            this.quill.getModule("toolbar").addHandler("image", this.selectLocalImage.bind(this));
            
            this.handleDrop = this.handleDrop.bind(this);
            this.handlePaste = this.handlePaste.bind(this);
            this.quill.root.addEventListener('drop', this.handleDrop, false);
            this.quill.root.addEventListener('paste', this.handlePaste, false);
        }
        _createClass(e, [{
            key: "handleDrop",
            value: function e(t) {
                t.preventDefault();
                if (t.dataTransfer && t.dataTransfer.files && t.dataTransfer.files.length) {
                    if (document.caretRangeFromPoint) {
                        var a = document.getSelection();
                        var i = document.caretRangeFromPoint(t.clientX, t.clientY);
                        if (a && i) {
                            a.setBaseAndExtent(i.startContainer, i.startOffset, i.startContainer, i.startOffset)
                        }
                    }
                    this.readFiles(t.dataTransfer.files, t)
                }
            }   
        }, {
            key: "handlePaste",
            value: function e(t) {
                var a = this;
                if (t.clipboardData && t.clipboardData.items && t.clipboardData.items.length) {
                    this.readFiles(t.clipboardData.items, t);
                }
            }
        }, {
            key: "selectLocalImage",
            value: function e() {
                var t = this;
                $(".quillfileupload").remove();
                var i = document.createElement("input");
                i.setAttribute("type", "file");i.setAttribute("class", "quillfileupload");
                i.setAttribute("style", "display:none;");
                document.body.appendChild(i);
                var ji = $(i);
                ji.on("change", function() {
                    var e = i.files[0];
                    if (/^image\//.test(e.type)) {
                        var n = t.options.checkBeforeSend || t.checkBeforeSend.bind(t);
                        n(e, t.sendToServer.bind(t))
                    } else {
                        console.warn("You could only upload images.")
                    }
                    $(".quillfileupload").remove();
                });
                i.click();
            }
        }, {
            key: "checkBeforeSend",
            value: function e(t, i) {
                i(t)
            }
        }, {
            key: "sendToServer",
            value: function e(t) {
                var i = this;
                if (this.options.customUploader) {
                    this.options.customUploader(t, function(e) {
                        i.insert(e)
                    })
                } else {
                    var n = this.options.url,
                        a = this.options.method || "POST",
                        s = this.options.name || "image",
                        o = this.options.headers || {},
                        l = this.options.callbackOK || this.uploadImageCallbackOK.bind(this),
                        r = this.options.callbackKO || this.uploadImageCallbackKO.bind(this);
                    if (n) {
                        var u = new FormData;
                        u.append(s, t);
                        if (this.options.csrf) {
                            u.append(this.options.csrf.token, this.options.csrf.hash)
                        }
                        var c = new XMLHttpRequest;
                        c.open(a, n, true);
                        for (var d in o) {
                            c.setRequestHeader(d, o[d])
                        }
                        c.onload = function() {
                            if (c.status === 200) {
                                l(JSON.parse(c.responseText), i.insert.bind(i))
                            } else {
                                r({
                                    code: c.status,
                                    type: c.statusText,
                                    body: c.responseText
                                })
                            }
                        };
                        if (this.options.withCredentials) {
                            c.withCredentials = true
                        }
                        c.send(u)
                    } else {
                        var f = new FileReader;
                        f.onload = function(e) {
                            l(e.target.result, i.insert.bind(i))
                        };
                        f.readAsDataURL(t)
                    }
                }
            }
        }, {
            key: "insert",
            value: function e(t) {
                var i = (this.quill.getSelection() || {}).index;
                if (i === undefined || i === null) {
                    i = this.quill.getLength();
                }
                this.quill.insertEmbed(i, "image", t, "user")
            }
        }, {
            key: "uploadImageCallbackOK",
            value: function e(t, i) {
                i(t)
            }
        }, {
            key: "uploadImageCallbackKO",
            value: function e(t) {
                alert(t)
            }
        }, {
            key: "readFiles",
            value: function e(t, event) {
                var j = this;
                [].forEach.call(t, function(e) {
                    if (!e.type.match(/^image\/(gif|jpe?g|a?png|svg|webp|bmp|vnd\.microsoft\.icon)/i)) {
                        return
                    }
                    event.preventDefault();
                    var i = e.getAsFile ? e.getAsFile() : e;
                    if (i instanceof Blob) {
                        var n = j.options.checkBeforeSend || j.checkBeforeSend.bind(j);
                        n(i, j.sendToServer.bind(j))
                    }
                })
            }
        }]);
        return e
    }();
    window.Quill.register('modules/imageUpload', exports.ImageUpload);
})();